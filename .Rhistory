install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
5+7
x<-5+7
x
y<-x-3
y
z<-c(1.1,9,3.14)
?c
z
c(z,555,z)
z*2+100
my_sqrt<-sqrt(z-1)
my_sqrt
my_div<-z/my_sqrt
my_div
c(1,2,3,4)+c(0,10)
c(1,2,3,4)+c(0,10,100)
z*2+1000
my_div
getwd()
ls()
x<-9
ls()
dir()
?list.files
args(list.files)
old.dir<-getwd
old.dir<-getwd()
dir.create(testdir)
?dir.create
dir.create("D:/testdir")
dir.create("testdir")
?setwd
setwd("testdir")
?file.create
file.create("mytest.R")
dir()
?file.exists
file.exists("mytest.R")
?file.info
file.info("mytest.R")
?file.rename
file.rename("mytest.R","mytest2.R")
?file.copy
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path(,'folder1','folder2')
file.path("mytest3.R",'folder1','folder2')
file.path("folder1","folder2")
?dir.create
?file.path
?dir.create
?file.path
play()
dir.create("dirtest",recursive=TRUE)
dir()
file.path("dirtest")
file.path("D:","testdir","dirtest")
nxt()
dir.create(file.path(dir.create("testdir2",recursuve=TRUE),"testdir3"))
dir.create(file.path(dir.create("testdir2",recursive=TRUE),"testdir3"))
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
setwd("old.dir")
setwd(old.dir)
?remove
remove(testdir)
remove("testdir")
?dir.remove
?unlink
unlink("testdir",recursive=TRUE)
swirl()
1:20
pi:10
15:1
?':'
seq(1,20)
seq(0,10, by=0.5)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with=my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
num_vect<-c(0.5,55,-10,6)
tf<-num_vect<1
tf
num_vect>= 6
my_char<-c("My","name","is")
my_char
paste(my_char,collapse = "")
paste(my_char,collapse = " ")
my_name<-c(my_char,"Amandine")
my_name
paste(my_name,collapse = " ")
paste("Hello","world!", sep = " ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS, 1:4, sep = "-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data<-sample(c(y,z),100)
my_na<-is.na(my_data)
my_na
my_data==NA
sum(my_na)
my_data
0/0
inf-inf
Inf-Inf
x
x[1:10]
x[is.na(x)]
y<-x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)&x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect<-c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2<-c(11,2,NA)
names(vect2)<-c("foo","bar","norf")
identical(vect,vect2)
vect["bar"]
vect[c("foo","bar")]
my_vector<-1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector)<- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix<-my_vector
?matrix
my_matrix2<- matrix(1:20, nrow=4, ncol = 5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(my_matrix, patient)
cbind(my_matrix, patients)
cbind(patients,my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data)<-cnames
my_data
swirl()
library(swirl)
swirl()
TRUE++
TRUE==TRUE
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE&FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FASE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE &
TRUE && c(TRUE,FASE,FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identicals('twins','twins')
identical('twins','twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2,4,5))
submit()
boring_function('My first function!')
boring_function
play()
?sum
nxt()
submit()
sourec(my_mean())
source(my_mean())
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor = 11,num = 5)
remainder (4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x) {x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Pragramming", "is", "fun!")
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
submit()
submit()
telegram("Hello")
submit()
mad_libs("New-York", "agressive", "statue")
submit()
submit()
'I'%p% 'love' %p% 'R'
'I'%p% 'love' %p% 'R!'
library(swirl)
swirl()
head(flags)
dim(flags)
viewinfo(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_co)
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
tapply(iris$Sepal.Length, iris$Species, mean)
library(datasets)
data(mtcars)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
setwd("D:/Git_Coursera/ProgrammingAssignment2")
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
a <- matrix(1:4,2,2)
View(a)
makeCacheMatrix(a)
b <- makeCacheMatrix(a)
View(b)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
vect <- 1:150
d <- makeVector(vect)
View(d)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(vect)
cachemean(5)
d <- makeVector(5)
cachemean(1:5, makeVector())
cachemean(makeVector(5), 5)
cachemean(makeVector(1:150), 1:150)
cachemean(makeVector(), c(1,3,5,8))
cachemean(makeVector(c(1,3,5,8)), c(1,3,5,8))
d <- makeVector(c(1,5,7,9))
cachemean(d, c(1,5,7,9))
cachemean(d, )
cachemean(d)
cachemean(d, c(2,7,9,10,30))
cachemean(d)
cachemean(d)
cachemean(makeVector(c(7,7,10,30,50,45,67,89,100)))
d <- makeVector(c(7,7,10,30,50,45,67,89,100)
d <- makeVector(c(7,7,10,30,50,45,67,89,100))
cachemean(d)
cachemean(d)
cachemean(makeVector(), c(7,7,10,30,50,45,67,89,100))
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
c <- makeCacheMatrix(a)
cacheSolve(c)
cacheSolve(c)
cacheSolve(c)
cacheSolve(makeCacheMatrix(a))
cachemean(makeVector(1:7))
cachemean(makeVector(1:7))
cachemean(makeVector(1:7))
solve(a)
a <- matrix(1:100,10,10)
View(a)
c <- makeCacheMatrix(a)
cacheSolve(c)
cacheSolve(c)
solve(a)
a <- matrix(1:36,6,6)
View(a)
solve(a)
?solve
a <- matrix(c(2,2,3,2), 2, 2)
View(a)
solve(a)
c <- makeCacheMatrix(a)
cacheSolve(c)
cacheSolve(c)
